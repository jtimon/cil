mode script

// Declarations and assignments:

AAA : bool = and(false, false, false, true, false) // Explicit types are allowed in declarations, but optional
BBB := or(false, true, false) // It is a strongly typed language, but allows type inference (not in arguments yet, never in return types)
// AAA := true // fails, re-declaration of user constant 'AAA'
// AAA = false // fails, assignment to a constant, all declarations are constant by default
mut CCC := true // variables need the mut keyword, both as variables and as arguments
CCC = false // assignments to mut declarations (aka variables/mut arguments) are allowed
// and := true // fails, re-declaration of core func 'and'

// Basic control flow:

// curly braces are mandatory for control flow definitions/statements, including functions, if/else, while, switch, etc

// if and if else statements:

// if 42 { // fails because ints are not allowed for conditions, only bool
// unnecessary parentheses are not implemented yet, not sure if they will be allowed
if gteq(2, 4) {
    println("aaa", "y", "aaa")
    print("aaa", "y", "eee")
    print("\n") // TODO make this and the next line be equivalent, don't escape \n
    println("")
} else {
    println("bbbbbbbb")
}

// while loop:

mut it := 0 // one has to use the 'mut' keyword for actual variables, since all declarations are const by default
print("it: ")
// while 42 { // fails, because while expects a bool first, not an int
while lt(it, 10) {
    print(itoa(it), " ")
    it = add(it, 1)
}
println(" ")

// Functions types:

// Procedures or procs can be declared and directly called in most modes including script
abc_proc := proc(a: bool, b: bool, c: bool) {

    abc := proc(a: bool, b: bool, c: bool) {
	println("inside abc, three bools: ", btoa(a), ", ", btoa(b), ", ", btoa(c))
    }
    abc(a, b, c)
}
abc_proc(true, true, true)
// TODO explicitly implement closures or equivalent before fixing this bug
abc_proc(false, false, false)

// Pure functions or funcs are similar to procs, but they can't have side effects, thus they cannot call to procedures
my_func := func(a: bool, b: bool) returns bool {
//     println("proc") // fails, funcs cannot call procs, println is a core proc
//     abc_proc() // fails, funcs cannot call procs, abc_proc is a custom proc
//     return 42 // fails, because 42 is not a bool
    return and(a, b)
}
test(my_func(true, true), "my_func(true, true) didn't return true")

// return can be used in functions that don't return anything to exit early
exit_early_print := proc(a: bool, msg: String) {
    println(msg)
    if a {
        return
    }
    println("exit_early_print didn't exit early")
}
exit_early_print(false, "Calling: exit_early_print(false, msg)")
exit_early_print(true, "Calling: exit_early_print(true, msg)")

// Functions can return multiple values
my_func_multi := func(a: bool, b: bool) returns bool, bool {
    return a, b
}
// _a, _b := my_func_multi(true, true) // TODO multiple declarations
// _a, _b = my_func_multi(true, true) // TODO multiple assignments

// TODO treat macros differently, currently they're equivalent to procs
my_macro := macro(a: bool, b: bool) returns bool {
    return and(a, b)
}
test(my_macro(true, true), "my_macro(true, true) didn't return true")

my_str_func := func(a: String) returns String {
    return a
}
arg_test_str := "strings can be passed as arguments and returned"
assert_eq_str(my_str_func(arg_test_str), arg_test_str)

main := proc() {
    mut my_bool := true
    my_bool = my_func(my_bool, my_func(true, my_func(true, true)))
    res := my_func(true, true)
    my_bool = and(res, my_func(true, my_func(true, true)))
    my_bool = my_func(res, my_func(true, my_func(true, true)))

    // abc(false, true, false) // fails, because abc is defined locally in proc 'abc_proc'
}
// 'mode script' doesn't need to declare a main proc, but it can, and also call it
main()

// TODO fix col for invalid args
// and(true, false, true, 15, "aaa", true, false) // fails because and only takes bool args

ExampleEnum := enum {
    A
    B
    C
}
// trying_dot_enum : ExampleEnum = 0 // fails because an enum is not an int
trying_dot_enum : ExampleEnum = ExampleEnum.A

my_enum_func := func(a: ExampleEnum) returns ExampleEnum {
    return a
}
my_enum_func(ExampleEnum.B)
trying_dot_enum2 : ExampleEnum = my_enum_func(ExampleEnum.B)
trying_dot_enum3 : ExampleEnum = my_enum_func(trying_dot_enum)

test_int_switch := proc (to_switch: i64) {
    switch to_switch {
    case add(40, 2):
       println("in test_int_switch(): ", itoa(to_switch), " is the answer.")
    case:
       println("in test_int_switch(): ", itoa(to_switch), " is a wrong answer.")
    }
}
test_int_switch(42)
test_int_switch(43)

// TODO fix assignments inside switch statements
test_switch_enum := proc(to_switch: ExampleEnum) returns String {
    mut to_return := ""
    switch to_switch {
        case ExampleEnum.A: to_return = "enum switch aaaaaa"
        case ExampleEnum.B: to_return = "enum switch bbbbbb"
        case: to_return = "enum cccccc by default"
    }
    // TODO core define etoa, base_enum_to_str or some equivalent
    // println("in test_switch_enum: to_switch: ", etoa(to_switch), " to_return: ", to_return)

    // println("inside test_switch_enum(): to_return: ", to_return)
    return to_return
}

// assert_eq_str(test_switch_enum(ExampleEnum.A), "enum switch aaaaaa")
// assert_eq_str(test_switch_enum(ExampleEnum.B), "enum switch bbbbbb")
assert_eq_str(test_switch_enum(ExampleEnum.C), "enum cccccc by default")
assert_eq_str(test_switch_enum(ExampleEnum.D), "enum cccccc by default")

// TODO fix macro() not implement yet
// test_return_switch_enum := macro(to_switch: ExampleEnum) returns String {}

// TODO fix returns inside switch statements
no_return_switch_str := "xxxxxx because return inside switch doesn't work even for enum"
test_return_switch_enum := proc(to_switch: ExampleEnum) returns String {
    switch to_switch {
        case ExampleEnum.A: return "enum switch aaaaaa"
        case ExampleEnum.B: return "enum switch bbbbbb"
        case: return "enum cccccc by default"
    }
    return no_return_switch_str
}
// assert_eq_str(test_return_switch_enum(ExampleEnum.A), "enum switch aaaaaa")
// assert_eq_str(test_return_switch_enum(ExampleEnum.B), "enum switch bbbbbb")
assert_eq_str(test_return_switch_enum(ExampleEnum.C), no_return_switch_str)
assert_eq_str(test_return_switch_enum(ExampleEnum.D), no_return_switch_str)

// Struct definitions can be used as namespaces by declaring only constants in them (no mut)
MyNamespace := struct {

    field_static_str : String = "field 'field_static_str' in struct 'MyNamespace' is being accessed"

    func_static_str := func() returns String {
        return "func 'func_static_str' in struct 'MyNamespace' is being called"
    }
}
println(MyNamespace.field_static_str)
// TODO println(MyNamespace.func_static_str())

// TODO next:

MyStruct := struct {
    mut bool_field : bool = false
    mut int_field : i64 = 42 // 42 is just the default, but you can set something else once in the init func
    mut string_field := ""

    // TODO allow assingments to struct fields, both mut or only overwrite the default once in init,
    // but then it is no longer "static", that's only for the compiler to care, not the user's problem
    // TODO static vs only_one assignment are details the interpreter should be smart enough to through errors about
    init := func(self: MyStruct, int_const : i64, bool_field : bool, int_field : i64, string_field) {
        // self.bool_field_static = 69 // TODO think of a keyword to force this to fail
        // self.int_const = 69
        // self.bool_field = true
        // self.int_field = 1
        // self.string_field = "true"
    }

    to_string := proc(self: MyStruct) returns String {
	todo("implement MyStruct.to_string()")
	return ""
    }
}

// my_struct_type := MyStruct
// my_struct := MyStruct.init()
// trying_dot_struct2 : bool = MyStruct.bool_field.ccccc

ExampleEnum2 := enum {
    // AAA : AAA // TODO This fails, because AAA is not a type, it's a bool
    // BBB : MyStruct // TODO This fails, because custom types are not allowed yet in enums
    // CCC : CCC // TODO This fails, because CCC is not defined
    DDD
    LBool : bool
    LNumber : i64
    LString : String
}

exit(0); // TODO note the semicolon is being ignored
// fails because No need for ';;' (aka empty statements), try 'if true {}' instead, whatever you want that for.
// exit(0);;

// TODO more built-in data types:

// my_bool_array := [true, false, true, false]
// my_bool_array : [4]bool = [true, false, true, false]
// my_list := (true, 1111, "hello")

// TODO undeclared custom arguments should fail at compile time
// test_fails_example := proc(example: String, msg: String) {
//   eval_example_result : String = _eval_string(example)
//   println(eval_example_result)
// }
// test_fails_example("enum_func_fails := func(a: ExampleEnumAAAAAAAA) returns ExampleEnum {}", "TODO implement test_fails_example() in the core")

// test_structs := proc() {
//     if MyStruct.bool_field {
//         println("aaaaaaaa")
//     }
// }
// test_structs()

// ---------------------------------------------------
// TODO implement import at least for mode lib, and then "import core", move these functions to core.cil

// self hosted:

// TODO fix aliases
// my_int : U64 = 1

// Note aliases can be used before declared:
Bool : Type = bool
Integer : Type = i64
Unsigned : Type = i64
U64 : Type = i64
OtherType : Type = Type

I64 := struct {
    mut data : i64 = 0

    // init := func(i: i64) returns I64 {
    //     n : I64
    // 	n.data = i;
    // 	return n
    // }

    // _add := func(self: I64, other: I64) returns I64 {
    // 	return add(self.data, other.data)
    // }

    // to_string := func(self: I64) returns String {
    // 	return itoa(self.data)
    // }
}

// fails because mut func/procs shouldn't be allowed at this context level, in this mode, or perhaps never
// mut assertm := proc(cond: bool, msg: String) {
assertm := proc(cond: bool, msg: String) {
    if not(cond) {
        println("assert failed: ", msg)
        exit(1)
    }
}

assert := proc(cond: bool) {
    assertm(cond, "")
}

test := proc(cond: bool, msg: String) {
    assertm(cond, msg)
}

// TODO use assert_eq_str in some example
assert_eq_str := proc(a: String, b: String) {
    if not(str_eq(a, b)) {
        println("assert_eq_str failed: '", a, "' != '", b, "'")
        exit(1)
    }
}

panic := proc(msg: String) {
    assertm(false, msg)
}
// panic("panic panics when uncommented") // fails, because it panics

todo := proc(msg: String) {
    print("TODO: ")
    assertm(false, msg)
}

// core := import("core") // fails because 'import' is not implemented yet

//// Intro to the language
// @ // fails because @ is invalid on the lexer for now
// adsgffdgfdg sdfgfsdgsf @ dfghj dgfhj // fails because @ is invalid on the lexer
