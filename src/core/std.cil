mode lib

panic2 := proc(msgs: ..String) {
    // TODO use variadic args in user defined functions. requires arrays
    exit(1)
}

panic := proc(msg: String) {
    println(msg)
    exit(1)
}

assertm := proc(cond: Bool, msg: String) {
    if not(cond) {
        panic(concat("assert failed: ", msg))
    }
}

assert := proc(cond: Bool) {
    assertm(cond, "")
}

assert_eq_str := proc(a: String, b: String) {
    if not(String.eq(a, b)) {
        println("assert_eq_str failed: expected '", a, "', found '", b, "'")
        exit(1)
    }
}

assert_eq := proc(a: I64, b: I64) {
    if not(a.eq(b)) {
        println("assert_eq failed: expected '", I64.to_str(a), "', found '", I64.to_str(b), "'")
        exit(1)
    }
}

todo := proc(msg: String) {
    print("TODO: ")
    assertm(false, msg)
}

branchless := func(cond: Bool, a: I64, b: I64) returns I64 {
    return add(mul(a, Bool.to_int(cond)), mul(b, Bool.to_int(not(cond))))
}

// TODO immplement aliases
// Note aliases can be used before declared:
// U64 : Type = I64
