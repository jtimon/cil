mode lib

xor := func(a: bool, b: bool) returns bool {
    // return a.and(not(b)).or(b.and(not(a))) // TODO implement UFCS (Uniform Function Call Syntax) for funccall return values
    // return or(a.and(not(b)), b.and(not(a))) // TODO implement UFCS (Uniform Function Call Syntax) again in self hostinf
    return or(and(a, not(b)), and(b, not(a)))
}

// Note that bool, i64 and String don't have fields because the're the core types
// think of them as "half-external types" for now
bool := struct {
    to_str := func(self: bool) returns String {
        return btoa(self)
    }

    to_int := func(self: bool) returns i64 {
        return btoi(self)
    }
}

i64 := struct {
    // mut data : i64 = 0 // self host the data

    to_str := func(self: i64) returns String {
        return itoa(self)
    }

    // TODO instantiate structs somehow
    __init__ := func(i: i64) returns i64 {
        // n := i64{data: i}
        // n.data = i;
        // return n
        return i
    }

    // TODO implement operators and allow operator overload
    __add__ := func(self: I64, other: I64) returns I64 {
        return add(self.data, other.data)
    }
}

String := struct {
    to_int := func(self: String) returns i64 {
        return atoi(self)
    }
}

panic2 := proc(msgs: ..String) {
    // TODO use variadic args in user defined functions. requires arrays
    exit(1)
}

panic := proc(msg: String) {
    println(msg)
    exit(1)
}
// panic("panic panics when uncommented") // fails, because it panics

// fails because mut func/procs shouldn't be allowed at this context level, in this mode, or perhaps never
// mut assertm := proc(cond: bool, msg: String) {
assertm := proc(cond: bool, msg: String) {
    if not(cond) {
	panic(concat("assert failed: ", msg))
    }
}

assert := proc(cond: bool) {
    assertm(cond, "")
}

test := proc(cond: bool, msg: String) {
    assertm(cond, msg)
}

assert_eq_str := proc(a: String, b: String) {
    if not(str_eq(a, b)) {
        println("assert_eq_str failed: expected '", a, "', found '", b, "'")
        exit(1)
    }
}

todo := proc(msg: String) {
    print("TODO: ")
    assertm(false, msg)
}

branchless := func(cond: bool, a: i64, b: i64) returns i64 {
    return add(mul(a, bool.to_int(cond)), mul(b, bool.to_int(not(cond))))
}

// TODO fix aliases
// my_int : i64 = 1

// Note aliases can be used before declared:
// U64 : Type = i64
// OtherType : Type = Bool
