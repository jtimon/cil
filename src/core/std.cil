mode lib

panic2 := proc(msgs: ..String) {
    // TODO use variadic args in user defined functions. requires arrays
    exit(1)
}

panic := proc(msg: String) {
    println(msg)
    exit(1)
}
// panic("panic panics when uncommented") // fails, because it panics

// fails because mut func/procs shouldn't be allowed at this context level, in this mode, or perhaps never
// mut assertm := proc(cond: bool, msg: String) {
assertm := proc(cond: bool, msg: String) {
    if not(cond) {
	panic(concat("assert failed: ", msg))
    }
}

assert := proc(cond: bool) {
    assertm(cond, "")
}

test := proc(cond: bool, msg: String) {
    assertm(cond, msg)
}

assert_eq_str := proc(a: String, b: String) {
    if not(str_eq(a, b)) {
        println("assert_eq_str failed: expected '", a, "', found '", b, "'")
        exit(1)
    }
}

assert_eq := proc(a: i64, b: i64) {
    // if not(a.eq(b)) { // TODO: fix, remove, just to test that methods/UFCS work
    if not(eq(a, b)) {
        println("assert_eq failed: expected '", i64.to_str(a), "', found '", i64.to_str(b), "'")
        exit(1)
    }
}

todo := proc(msg: String) {
    print("TODO: ")
    assertm(false, msg)
}

branchless := func(cond: bool, a: i64, b: i64) returns i64 {
    return add(mul(a, bool.to_int(cond)), mul(b, bool.to_int(not(cond))))
}

// TODO fix aliases
// my_int : i64 = 1

// Note aliases can be used before declared:
// U64 : Type = i64
// OtherType : Type = Bool
