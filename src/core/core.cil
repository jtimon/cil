mode lib

import("src/core/constants")

// Comparisons are hateful, plus two of them are probably enough for now:
lt        := ext_func(a: I64, b: I64) returns Bool;
gt        := ext_func(a: I64, b: I64) returns Bool;

// Minimal arithmehics are fair and necessary
add       := ext_func(a: I64, b: I64) returns I64;
sub       := ext_func(a: I64, b: I64) returns I64;
mul       := ext_func(a: I64, b: I64) returns I64;
div       := ext_func(a: I64, b: I64) returns I64;
mod       := ext_func(a: I64, b: I64) returns I64; // TODO implement 'mod'

concat    := ext_func(a: String, b: String) returns String; // TODO self host once we have pointers, mem alloc and free simulated

// TODO implement the variadic part of print/println in std
print   := ext_proc(args: ..String); // TODO move 'print' to std after supporting variadic arguments
// TODO now that '\n' bug is fixed, we're waiting for user variadic arguments
println := ext_proc(args: ..String); // TODO move 'println' to std after fixing
// TODO This should be ext, and the print and println self hosted
single_print := proc(s: String) {
    print(s) // TODO use some lowe level thing so tha print can depend on this instead of the other way around
}

exit    := ext_proc(code: I64);
// TODO parse with dots like other languages, then change the direction of the slash depending on the os
// TODO use imports in declarations:
// example_cil: my_matrix_def := import(matrix.matrix_def)
// example_cil: my_matrix : struct = import(matrix)
// example_python: from matrix import matrix_def as my_matrix_def
import  := ext_proc(path: String);
runfile := ext_proc(args: ..String);

loc := ext_func() returns String; // Returns the current source location as "<file>:<line>:<col>:"

panic := proc(loc_str: String, msg: String) {
    print(concat(loc_str, msg, "\n"))
    exit(1)
}

// Memory operations
malloc := ext_proc(size: I64) returns I64;
free := ext_proc(ptr: I64);
memcpy := ext_proc(dest: I64, src: I64, size: I64);
memset := ext_proc(dest: I64, value: U8, size: I64);

Ptr := struct {
    INVALID : I64 = sub(0, 1) // Use -1 to represent an invalid/uninitialized pointer
    mut data: I64 = Ptr.INVALID

    new := proc(size: I64) returns Ptr {
        mut p := Ptr()
        p.data = malloc(size)
        return p
    }

    free := proc(self: Ptr) {
        if gt(0, self.data) {
            panic("Ptr.free: trying to free an invalid pointer")
        }
        free(self.data)
    }

    offset := proc(self: Ptr, offset: I64) returns Ptr {
        mut p := Ptr()
        p.data = add(self.data, offset)
        return p
    }

    cast := macro(self: Ptr, type_name: String) returns Ptr {
        // TODO: This cast is purely cosmetic for now.
        // Proper type-changing macros are not implemented yet.
        return self
    }

    copy_to := proc(self: Ptr, mut dest: Ptr, size: I64) {
        memcpy(dest.data, self.data, size)
    }

    set_zero := proc(mut self: Ptr, size: I64) {
        memset(self.data, U8.from_i64(0), size)
    }
}

enum_to_str     := ext_func(e: I64) returns String; // TODO not sure why this works since we're using it with enums rather than I64
eval_to_str     := ext_proc(a: String) returns String;
eval_to_ast_str := ext_proc(src: String) returns String; // TODO
eval_to_expr    := ext_proc(src: String) returns Expr; // TODO

input_read_line := ext_proc(a: String) returns String;
readfile        := ext_proc(path: String) returns String;
writefile       := ext_proc(path: String, contents: String) returns String; // TODO

not := func(b: Bool) returns Bool {
    if b {
        return false
    }
    return true
}

// TODO variadic arguments should allowed 0 arguments too, unlike in print, println, and, or
// TODO implement the variadic versions of and/or
or := func(a: Bool, b: Bool) returns Bool {
    if a {
        return true
    }
    if b {
        return true
    }
    return false
}

and := func(a: Bool, b: Bool) returns Bool {
    if not(a) {
        return false
    }
    if not(b) {
        return false
    }
    return true
}

// Note that Bool, I64 and String don't have fields because the're the core types
// think of them as "half-external types" for now
Bool := struct {
    size := U8_SIZE

    mut data: U8 = 0

    len := func(self: Bool) returns I64 {
        return 1
    }

    eq := func(a: Bool, b: Bool) returns Bool {
        return or(and(a, b), and(not(b), not(a)))
    }

    to_str := func(self: Bool) returns String {
        if self {
            return "true"
        }
        return "false"
    }

    // necessary for branchless arithmetics (but it must be implemented as a cast for it to make sense that way)
    to_i64 := func(self: Bool) returns I64 {
        if self {
            return 1
        }
        return 0
    }

    to_u8 := func(self: Bool) returns U8 {
        // TODO move to directly return self.data instead
        if self {
            return 1
        }
        return 0
    }

    from_i64 := func(i: I64) returns Bool { // TODO support regular struct returns to be able to this as a regular struct internally (except for if/while conditions)
        b := Bool()
        if gt(i, 0) {
            return true
            // b.data = 1 // TODO use this instead
        }
        return b
    }
}
false := Bool.from_i64(0)
// true := Bool.from_i64(1) // TODO stop using "true" as literal

lteq := func(a: I64, b: I64) returns Bool {
    if lt(a, b) {
        return true
    }
    if a.eq(b) {
        return true
    }
    return false
}

gteq := func(a: I64, b: I64) returns Bool {
    if gt(a, b) {
        return true
    }
    if a.eq(b) {
        return true
    }
    return false
}

U8 := struct {
    size: I64 = U8_SIZE

    // TODO FIX can't use itself as base data, can it?
    // TODO This is the base of data storage, not I64
    // mut data: I8 = 0

    len := func(self: I64) returns I64 {
        return 1
    }

    to_i64 := func(self: U8) returns I64 {
        // return cast("I64", self) // TODO implement cast, start easy with U8 to I64
        u8_to_i64 := ext_func(u8: U8) returns I64;
        return u8_to_i64(self)
    }

    from_i64 := func(self: I64) returns U8 {
        if lt(self, 0) {
            return panic("Negative values cannot be cast into 'U8'")
        }
        if gt(self, MAX_U8) {
            return panic(concat("U8: cannot be casted from an I64 greater than: ", I64.to_str(MAX_U8)))
        }
        i64_to_u8 := ext_func(i64: I64) returns U8;
        return i64_to_u8(self)
    }

    to_str := func(self: U8) returns String {
        return I64.to_str(U8.to_i64(self))
    }
}

I64 := struct {
    size: I64 = I64_SIZE
    // mut data := 0 // TODO Use [8]U8 for this one

    len := func(self: I64) returns I64 { return 1 }

    eq := func(a: I64, b: I64) returns Bool {
        if or(gt(a, b), gt(b, a)) {
            return false
        }
        if or(lt(a, b), lt(b, a)) {
            return false
        }
        return true
    }

    to_str := func(self: I64) returns String {
        i64_to_str := ext_func(a: I64) returns String;
        return i64_to_str(self)
    }

    from_str := func(str: String) returns I64 {
        str_to_i64 := ext_func(a: String) returns I64;
        return str_to_i64(str) // TODO: this can fail and panic from rust
    }

    inc := proc(mut self: I64) {
        self = add(self, 1)
    }

    dec := proc(mut self: I64) {
        self = sub(self, 1)
    }

    // TODO: implement operators and allow operator overload
    __add__ := func(self: I64, other: I64) returns I64 {
        return add(self, other)
    }
}

String := struct {
    // TODO get rid of special cases for String besides literals
    // mut ptr : Ptr = Ptr()
    mut ptr : I64 = 0
    mut cap : I64 = 0

    size := func(self: String) {
        return mul(2, I64.size)
    }

    len := func(self: String) returns I64 {
        str_len := ext_func(a: String) returns I64;
        return str_len(self)
    }

    eq := func(self: String, other: String) returns Bool {
        str_eq := ext_func(a: String, b: String) returns Bool; // TODO declare only here
        return str_eq(self, other)
    }

    to_i64 := func(self: String) returns I64 {
        return I64.from_str(self)
    }

    get_substr := func(s: String, start: I64, end: I64) returns String {
        if gt(end, s.len()) {
            panic("get_substr: ", end, " greater than ", s.len())
        }
        str_get_substr := ext_func(s: String, start: I64, end: I64) returns String; // TODO declare only here
        return str_get_substr(s, start, end)
    }

    get_char := func(s: String, pos: I64) returns String {
        start := pos
        end := add(pos, 1)
        return s.get_substr(start, end)
    }
}

// TODO rustic interfaces with arrays, for variadic functions at least at first
# array_Bool_len := ext_func(a: ArrayBool) returns I64;
# array_Bool_get := ext_func(a: ArrayBool, pos: I64) returns Bool;

# array_i64_len := ext_func(a: ArrayI64) returns I64;
# array_i64_get := ext_func(a: ArrayI64, pos: I64) returns I64;

# array_str_len := ext_func(a: ArrayString) returns I64;
# array_str_get := ext_func(a: ArrayString, pos: I64) returns String;

// TODO implement macros:
// array_struct_len := ext_func(a: ArrayStruct) returns I64;
// array_str_get := ext_func(a: ArrayStruct, pos: I64) returns String;
// array_generic_len := ext_func(a: Array) returns I64;
// array_generic_get := ext_func(a: Array, pos: I64) returns String;
