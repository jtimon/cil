mode lib

not := ext_func(a: bool) returns bool;
or  := ext_func(args: ..bool) returns bool; // TODO move 'or' to std after supporting variadic arguments
and := ext_func(args: ..bool) returns bool; // TODO move 'and' to std after supporting variadic arguments
// TODO implement bin_and and bin_or and use them to self host 'and' and 'or'
// TODO implement the variadic part of and/or in std
bin_and := ext_func(a: bool, b: bool) returns bool; // TODO implent
bin_or := ext_func(a: bool, b: bool) returns bool; // TODO implent

eq     := ext_func(a: i64, b: i64) returns bool;
lt     := ext_func(a: i64, b: i64) returns bool;
lteq   := ext_func(a: i64, b: i64) returns bool;
gt     := ext_func(a: i64, b: i64) returns bool;
gteq   := ext_func(a: i64, b: i64) returns bool;

add := ext_func(a: i64, b: i64) returns i64;
sub := ext_func(a: i64, b: i64) returns i64;
mul := ext_func(a: i64, b: i64) returns i64;
div := ext_func(a: i64, b: i64) returns i64;

itoa := ext_func(a: i64) returns String;
atoi := ext_func(a: String) returns i64;

str_eq := ext_func(a: String, b: String) returns bool;
concat := ext_func(a: String, b: String) returns String;
str_len := ext_func(a: String) returns i64;
str_get_substr := ext_func(a: String, start: i64, end: i64) returns String;

print   := ext_proc(args: ..String); // TODO move 'print' to std after supporting variadic arguments
// TODO self host using print once the self escaped '\n' bug is fixed
println := ext_proc(args: ..String); // TODO move 'println' to std after fixing
// TODO implement the variadic part of print/println in std
single_print := ext_proc(a: String); // TODO

exit    := ext_proc(code: i64);
// TODO parse with dots like other languages, then change the direction of the slash depending on the os
// TODO use imports in declarations:
// example_cil: my_matrix_def := import(matrix.matrix_def)
// example_cil: my_matrix : struct = import(matrix)
// example_python: from matrix import matrix_def as my_matrix_def
import  := ext_proc(path: String);
runfile := ext_proc(path: String);

eval_to_str     := ext_proc(a: String) returns String;
eval_to_ast_str := ext_proc(src: String) returns String; // TODO
eval_to_expr := ext_proc(src: String) returns Expr; // TODO

input_read_line := ext_proc(a: String) returns String;

readfile := ext_proc(path: String) returns String;
writefile := ext_proc(path: String, contents: String) returns String; // TODO

// TODO rustic interfaces with arrays, for variadic functions at least at first
# array_bool_len := ext_func(a: ArrayBool) returns i64;
# array_bool_get := ext_func(a: ArrayBool, pos: i64) returns bool;

# array_i64_len := ext_func(a: ArrayI64) returns i64;
# array_i64_get := ext_func(a: ArrayI64, pos: i64) returns i64;

# array_str_len := ext_func(a: ArrayString) returns i64;
# array_str_get := ext_func(a: ArrayString, pos: i64) returns String;

// TODO implement macros:
// array_struct_len := ext_func(a: ArrayStruct) returns i64;
// array_str_get := ext_func(a: ArrayStruct, pos: i64) returns String;
// array_generic_len := ext_func(a: Array) returns i64;
// array_generic_get := ext_func(a: Array, pos: i64) returns String;
