mode test

// runfile("src/repl.til") // REM don't run this from the tests unless for debug

runfile("src/test/future.til")

// self hosting:
runfile("src/til.til", "src/test/self/lexer/premode.til")
// runfile("src/til.til", "src/test/self/lexer/error.til") // REM: uncomment to test lexer tests

println("\nSome versions of 'hello world' in different basic modes:\n")

runfile("src/test/hello/hello_cli.til")
runfile("src/test/hello/hello_lib.til")
runfile("src/test/hello/hello_pure.til")
runfile("src/test/hello/hello_script.til")
// test a part of posix compatibility, it doesn't require the mode to be script, it can be compiled too, like roc
// Ideally we should benchmark against at least bash, python, roc, Rust, C and HolyC for this kind of mode, both interpreted and compiled
runfile("src/test/hello/hello_script_shebang.til")
// runfile("src/test/hello/hello_script_safe.til") // TODO this is much harder than it sounds
runfile("src/test/hello/hello_test.til")

println("\nSome basic tests/examples:\n")

runfile("src/test/arithmetics.til")
runfile("src/test/arrays.til")
runfile("src/test/boolean.til")
runfile("src/test/branchless.til")
runfile("src/test/c_mem.til")
runfile("src/test/comparisons.til")
runfile("src/test/editor_mode_test.til")
runfile("src/test/enums.til")
runfile("src/test/errors.til")
runfile("src/test/fibonacci.til") // recursive examples
runfile("src/test/flow.til") // control flow, execution path examples
runfile("src/test/function_pointers.til")
runfile("src/test/intro.til")
runfile("src/test/maps.til")
runfile("src/test/namespaces.til")
runfile("src/test/pointers.til")
runfile("src/test/strings.til")
runfile("src/test/structs.til")
runfile("src/test/u8.til")
runfile("src/test/ufcs.til")
runfile("src/test/variadic.til")

// next level:

runfile("src/test/eval.til")

// The closest to a std lib this language has
// runfile("src/core.til") // you can't run it because it is already imported everywhere

runfile("src/test/todo.til") // permanent TODO
// runfile("src/test/errors.til") // TODO implement, throw, throws and catch, or at least try (multiple return values too, and rust_like "Result")

// LLM suggested tests:
runfile("src/test/llm/llama3.3.til") // TODO FIX from discussing tagged unions in rust vs algebraic types in haskell

// REM test exit.til only at the end
runfile("src/test/exit.til")
