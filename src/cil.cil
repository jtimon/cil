mode cli

import("src/core/parser")
// parser := import("src/core/parser") // TODO accept imports as declarations of struct (as namespace)

//** WIP: Self hosted implementation of LANG_NAME

LANG_NAME: String = "cil"
REPL_PATH: String = "src/core/modes/repl.cil";

// TODO rscil implement arrays
// scan_tokens := func(source: String) returns Array(Token) {}

// TODO use variadic arguments
// TODO move the repl subcommmand here, rscil only to interpret
main := proc(path: String) {

    if or(String.eq("", path), String.eq("repl", path)) {
        runfile(REPL_PATH)
        return
    }

    println("[INFO] '", LANG_NAME, "': Reading file '", path, "'")
    source := readfile(path)
    scan_tokens(source) // TODO remove later since it is  redundant with 'Lexer.new(source)'
    // lexer := Lexer.new(source) // TODO
    // TODO("Not self hosted yet")

    // TODO implement get_current_line() core func to print better errors from cil
    // println(path, ":0:0: TODO: Eventally 'args' is going to be needed for mode 'cli', in the 'main' proc")
    // println(path, ":0:0: TODO: REM: Implement lexer")
}
