mode cli

import("src/core/interpreter")
// interpreter := import("src/core/interpreter") // TODO accept imports as declarations of struct (as namespace)

CURRENT_VERSION := "cil_0.0.1" // REM: No point in advancing versions until it compiles itself
REPL_PATH       := "src/core/modes/repl.cil"

// FIX Cannot use 'main_args' of type 'StrArray' as an argument. Only name of struct instances allowed for struct arguments for now.
// run_file_or_exit := proc(path: Str, main_args: StrArray) {
run_file_or_exit := proc(path: Str) {
    println("[INFO] '", LANG_NAME, "': Reading file '", path, "'")
    src := readfile(path)
    tokens := scan_tokens(src) // REM don't call scan_tokens from here
    catch (err: Str) {
        println(err)
        exit(1)
    }
    println("Lexer: ", I64.to_str(tokens.len), " tokens scanned.")

    // FIX Lexer.new(path) and we stop callig scan_tokens(src)
    // lexer := Lexer.new(path)
    // lexer.print_lex_errors()
}

usage := proc() {
    println("Usage: ", LANG_NAME, " [command] [path]\n");
    println("Entering no arguments is equavalent to: '", LANG_NAME, " repl'");
    println("Entering a single argument that's not a command is interpreted as a path, equivalent to: '", LANG_NAME, " interpret <path>'\n");

    println("Commands:\n");

    println("repl: read eval print loop.");
    println("interpret: reads a file in provided <path> and evaluates it.");
    // println("ast: reads a file in provided <path> and prints its abstract syntax tree (aka (lisp-like-syntax ast-from-now-on ) ).");
    println("build: reads a file in provided <path> and compiles it. Not implemented yet.");
    println("run: reads a file in provided <path> and runs it if it compiles. Not implemented yet.");
    println("help: Prints this.\n");
    println("version, --version, -v: Prints version.\n");
}

main := proc(args: ..Str) {

    if gt(args.len, 1) {
        mut main_args := StrArray.new(sub(args.len, 1))
        mut i := 1
        while i.lt(args.len) {
            main_args.set(add(i, 0), args.get(i))
            catch(err: IndexOutOfBoundsError) {
                // REM: It is fine to args.set(0) here, we just checked
            }
            i.inc()
        }

        cmd := args.get(0)
        catch(err: IndexOutOfBoundsError) {
            // REM: It is fine to args.get(0) here, we just checked
        }
        switch cmd {
        case "interpret" : run_file_or_exit(args.get(1))
        // case "interpret" : run_file_or_exit(args.get(1), main_args) // TODO FIX
        case "repl"      : usage()
        case "build"     : usage()
        case "run"       : usage()
        case:
            println("command '", cmd, "' not implemented.")
            usage()
        }

    } else if gt(args.len, 0) {
        path := args.get(0)
        catch(err: IndexOutOfBoundsError) {
            // REM: It is fine to args.get(0) here, we just checked
        }
        switch path {
        // case "version" | "--version" | "-v": println(CURRENT_VERSION) // TODO Some syntax to 'or' cases
        case "repl"      : runfile(REPL_PATH)

        case "version"   : println(CURRENT_VERSION)
        case "--version" : println(CURRENT_VERSION)
        case "-v"        : println(CURRENT_VERSION)

        case "--help"    : usage()
        case "-help"     : usage()
        case "help"      : usage()

        case "ast"       : usage()
        case "build"     : usage()
        case "interpret" : usage()
        case "run"       : usage()
        case:
            run_file_or_exit(args.get(0))
            // run_file_or_exit(args.get(0), StrArray.new(0)) // TODO FIX
        }
    } else {
        runfile(REPL_PATH)
    }
}
