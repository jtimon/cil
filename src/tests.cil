mode test

// runfile("src/repl.cil") // REM don't run this from the tests unless for debug

println("\nSome versions of 'hello world' in different basic modes:\n")

runfile("src/test/hello/hello_lib.cil")
// runfile("src/test/hello/hello_pure.cil") // TODO can't call procs
runfile("src/test/hello/hello_cli.cil")
runfile("src/test/hello/hello_script.cil")
// test a part of posix compatibility, it doesn't require the mode to be script, it can be compiled too, like roc
// Ideally we should benchmark against at least bash, python, roc, Rust, C and HolyC for this kind of mode, both interpreted and compiled
runfile("src/test/hello/hello_script_shebang.cil")
// runfile("src/test/hello/hello_script_safe.cil") // TODO this is much harder than it sounds
runfile("src/test/hello/hello_test.cil")

println("\nSome basic tests/examples:\n")

runfile("src/test/arithmetics.cil")
runfile("src/test/boolean.cil")
runfile("src/test/branchless.cil")
runfile("src/test/comparisons.cil")
runfile("src/test/editor_mode_test.cil")
runfile("src/test/enums.cil")
runfile("src/test/errors.cil")
runfile("src/test/fibonacci.cil") // recursive examples
runfile("src/test/flow.cil") // control flow, execution path examples
runfile("src/test/intro.cil")
runfile("src/test/namespaces.cil")
runfile("src/test/strings.cil")
runfile("src/test/structs.cil")
runfile("src/test/ufcs.cil")

// next level:

runfile("src/test/eval.cil")

// The closest to a std lib this language has
// runfile("src/core.cil") // you can't run it because it is already imported everywhere

runfile("src/test/todo.cil") // permanent TODO
// runfile("src/test/errors.cil") // TODO implement, throw, throws and catch, or at least try (multiple return values too, and rust_like "Result")

// LLM suggested tests:
runfile("src/test/test_gpt4o_mini_tests.cil")
runfile("src/test/test_grok3_tests.cil")

// WIP Work towards self hosting
runfile("src/cil.cil", "src/test/example_self_hosted.cil")
runfile("src/test/exit.cil")
