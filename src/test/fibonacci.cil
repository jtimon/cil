mode test

// Here are some examples of pure functions, this time with recursion:
fib_test := proc(fib_arg: I64) {
    fib_0 := func(n: I64) returns I64 {
        if lt(n, 2) {
            return n
        }
        return add(fib_0(sub(n, 1)), fib_0(sub(n, 2)))
    }

    fib_1 := func(n: I64) returns I64 {
        if lt(n, 2) {
            return n
        } else {
            return add(fib_1(sub(n, 1)), fib_1(sub(n, 2)))
        }
    }

    fib_2 := func(n: I64) returns I64 {
        if lt(n, 2) {
            return n
        }
        mut a := 0
        mut b := 1
        mut i := 2
        while lteq(i, n) {
            temp := add(a, b)
            a = b
            b = temp
            i = add(i, 1)
        }
        return b
    }

    test_fib_alg := proc(num_alg: I64, n: I64) {
    	switch num_alg {
        case 0: test(I64.eq(fib_0(n), fib_1(n)), "fib_0(n) or fib_1(n) are faulty")
        case 1: test(I64.eq(fib_1(n), fib_0(n)), "fib_1(n) is faulty")
        case 2: test(I64.eq(fib_2(n), fib_0(n)), "fib_2(n) is faulty")
        case:
            println("test_fib_alg: algorithm '", I64.to_str(num_alg), "' not implemented")
            panic("TODO: another fib algorithm")
	    }
    }

    // print_results := proc(n: I64) {
    //     println("Fibonnaci results: ", I64.to_str(fib_0(n)), ", ", I64.to_str(fib_1(n)), ", ", I64.to_str(fib_2(n)))
    // }
    // print_results(fib_arg)

    test_fib_alg(0, fib_arg)
    test_fib_alg(1, fib_arg)
    test_fib_alg(2, fib_arg)
    // test_fib_alg(3, fib_arg) // TODO memoize version
}
fib_test(5)
fib_test(10)
// fib_0(15) // fails because 'fib_0' is defined locally inside fib_test

// TODO make memoize, dumb iterative and cached iterative versions for when benchmarks; after self hosting
