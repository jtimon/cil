mode test

my_false := false
my_true  := true
my_int_a := 40
my_int_b :=  2


// Test Universal Function Call System (UFCS)

test_ufcs := proc () {
    // if not() 
    assert(not(my_int_a.int_eq(my_false)))
    assert(not(my_false))
    assert(my_true)
    // assert(my_true.and(my_true)) // TODO FIX
    assert(not(my_true.and(my_false)))
    // assert(my_true.or(my_false)) // TODO FIX
    // assert(my_false.or(my_true)) // TODO FIX

    // test(true.and(true), "true.and(true) == true") // TODO implement UFCS (Uniform Function Call Syntax) for literals
    // test(and(true, true).and(true)), "and(true, true).and(true)) == true") // TODO implement UFCS (Uniform Function Call Syntax) for func calls results

    // xor := func(a: Bool, b: Bool) returns Bool {
    //     return a.and(not(b)).or(b.and(not(a))) // TODO implement UFCS (Uniform Function Call Syntax) for funccall return values
    //     return or(a.and(not(b)), b.and(not(a))) // TODO implement UFCS (Uniform Function Call Syntax) again in self hostinf
    // }
    
    // aaa := true
    // test(aaa.and(true), "true.and(true) == true") // TODO FIX UFCS (Uniform Function Call Syntax)
}
