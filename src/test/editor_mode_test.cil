// editor_mode_test.cil - Test file for cil-mode.el highlighting

// Keywords should be highlighted
mode script // 'mode' (font-lock-keyword-face in emacs)

if true { // 'if', 'true' (font-lock-keyword-face in emacs)
    while false { // 'while', 'false' (font-lock-keyword-face in emacs)
        // Do nothing
    }
}

my_func := func(a1: Bool, a2: Bool, a3: Bool) returns Bool {
    return true
}

if true {
    // Do nothing
} else { // TODO support "else if" without requiring braces for the else
    if true {
        // Do nothing
    } else {
        // Do nothing
        my_val := my_func(
            true,
            true,
            my_func(
                true,
                true,
                true
            )
        )
    }
}

// static x := 10 // Should highlight 'static' in error face
// var y := 20    // Should highlight 'var' in error face
// const z := 30  // Should highlight 'const' in error face

// Built-in types
my_i64 : I64 = 42 // 'I64' (font-lock-type-face in emacs)
my_Bool : Bool = true // 'Bool' (font-lock-type-face in emacs)
my_string : String = "test" // 'String' (font-lock-type-face in emacs)

// Builtins
result := add(1, 2) // 'add' (font-lock-builtin-face in emacs)
printed := String.concat("He", "llo") // 'concat' (font-lock-builtin-face in emacs)

// Type declarations (enum and struct)
MyEnum := enum { // 'MyEnum' (font-lock-type-face in emacs)
    Variant1, // No type, no highlight yet (TODO)
    Variant2 : I64, // 'I64' (font-lock-type-face in emacs)
}

MyStruct := struct { // 'MyStruct' (font-lock-type-face in emacs)
    associated_constant : Bool = false // 'Bool' (font-lock-type-face in emacs)
}

// Vaariable declarations and assignments
mut x := 10 // 'x' in variable declaration (font-lock-variable-name-face in emacs)
// Constant declarations
y := 20 // 'y' (font-lock-constant-face in emacs), since := works

// Types in declarations and signatures
proc_with_args := proc(arg1: I64, arg2: String) { // 'I64', 'String' (font-lock-type-face in emacs), 'arg1', 'arg2' (font-lock-constant-face in emacs)
    return // 'return' (font-lock-keyword-face in emacs)
}
returns_bool := proc() returns Bool { // 'Bool' (font-lock-type-face in emacs), 'returns_bool' (font-lock-function-name-face in emacs)
    return true
}
a := returns_bool()
// Mutable variables with 'mut'
mut z : I64 = 30 // 'mut' (font-lock-keyword-face in emacs), 'z' (font-lock-variable-name-face in emacs), 'I64' (font-lock-type-face in emacs)
mut w := 40 // 'mut' (font-lock-keyword-face in emacs), 'w' (font-lock-variable-name-face in emacs)

// Constant arguments in function signatures
// TODO implement mut args
// my_proc := proc(const_arg: I64, mut mut_arg: String) { // 'const_arg' (font-lock-constant-face in emacs), 'mut' (font-lock-keyword-face in emacs), 'mut_arg' (font-lock-variable-name-face in emacs), 'I64', 'String' (font-lock-type-face in emacs)
//     // Nothing here
// }

// Inferred constants with ':=' (working)
inferred := 50 // 'inferred' (font-lock-constant-face in emacs)
inferred_str := "string" // 'inferred_str' (font-lock-constant-face in emacs)

// WIP cases that don't work yet
spaced_const : = 60 // 'spaced_const' (no highlight, WIP)
typed_const : I64 = 70 // 'typed_const' (no highlight, WIP), 'I64' (font-lock-type-face in emacs)

// Case statement (should not be constant)
switch x { // 'switch' (font-lock-keyword-face in emacs)
case 4: // 'case' (font-lock-keyword-face in emacs), 'check_value' (no highlight, should not be font-lock-constant-face in emacs)
    x = 100 // 'x' in assigment must be variable (font-lock-variable-name-face in emacs)
case:
    x = 69
}
