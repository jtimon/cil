// llama3.3 generated just by talking to it about this language and giving it examples
mode test

// Define an enum with tagged unions
Color := enum {
    Unknown,
    Green: Bool,
    Number: I64,
    Name: String,
}

// TODO tagged unions
// Test tagged unions
// test_color := func(to_switch: Color) returns String {
//     switch to_switch {
//     case Color.Unknown: return "unknown color"
//     case Color.Green(is_olive):
//         if is_olive {
//             return "olive green"
//         } else {
//             return "dark green"
//         }
//     case Color.Number(code):
//         if gt(code, 0) {
//             return "positive color code"
//         } else {
//             return concat("color code: ", I64.to_str(code))
//         }
//     case Color.Name(name): return concat("color name: ", name)
//     }
// }

// Test nested data structures
Point := struct {
    mut x: I64 = 0
    mut y: I64 = 0

    new := func(x: I64, y: I64) returns Point {
        self = Point()
        self.x = x
        self.y = y
        return self
    }
}

// Identical and equivalent to Point.new(x, y)
point_new := func(x: I64, y: I64) returns Point {
    mut self := Point()
    self.x = x
    self.y = y
    return self
}

// TODO using struct literals in switch/match cases is indeed another grgeat reason to implement struct literals
// llama3 says this is necessary for "nested data structures" whatever that is
// if it's structs as fields of other structs, of curse that's on my todo, lul
// test_point := func(p: Point) returns String {
//     switch p {
//     case Point{x: 0, y: 0}: return "origin"
//     case Point{x: x, y: y}: return concat("point (", concat(I64.to_str(x), concat(", ", concat(I64.to_str(y), ")"))))
//     }
// }

// Run tests
// assert_eq_str(test_color(Color.Unknown), "unknown color")
// assert_eq_str(test_color(Color.Green(true)), "olive green")
// assert_eq_str(test_color(Color.Green(false)), "dark green")
// assert_eq_str(test_color(Color.Number(42)), "positive color code")
// assert_eq_str(test_color(Color.Number(sub(0, 1))), "color code: -1") // TODO literal negatives not supported yet
// assert_eq_str(test_color(Color.Name("blue")), "color name: blue")

// assert_eq_str(test_point(Point()), "origin")
// assert_eq_str(test_point(point_new(0, 0)), "origin")
// assert_eq_str(test_point(Point.new(0, 0)), "origin")
// TODO struct literals not supported yet
// assert_eq_str(test_point(Point{x: 1, y: 2}), "point (1, 2)")
