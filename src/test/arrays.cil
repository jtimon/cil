mode test

test_array_static_u8 := proc() {
    mut stat := U8Array.new(3)
    assert_eq(loc(), 3, stat.len)       // Static array len equals cap
    assert_eq(loc(), stat.cap, stat.len) // Static array len equals cap
    test(loc(), not(stat.is_dyn), "Static array should not be dynamic")
    stat.set(0, U8.from_i64(10))
    stat.set(1, U8.from_i64(20))
    stat.set(2, U8.from_i64(30))
    test(loc(), U8.eq(U8.from_i64(30), stat.get(2)), "Get after set at index 2")

    // Uncomment to test panic behavior
    // stat.push(U8.from_i64(77)) // Should panic

    stat.delete()

    catch(err: Str) {
        println(loc(), "test_array_static_u8: error thrown:")
        println(err)
    }
    catch(err: IndexOutOfBoundsError) {
        println(loc(), "test_array_static_u8: IndexOutOfBoundsError thrown:")
        println(err.msg)
    }
    catch(err: U8_OverflowError) {
        println(loc(), "test_array_static_u8: U8_OverflowError thrown:")
        println(err.msg)
    }
}
test_array_static_u8()

test_array_dynamic_u8 := proc() {
    mut dyn := U8Array.new_dyn()
    assert_eq(loc(), 0, dyn.len)
    assert_eq(loc(), U8Array.INIT_DYN_CAP, dyn.cap)

    dyn.push(U8.from_i64(42))
    dyn.push(U8.from_i64(255))
    assert_eq(loc(), 2, dyn.len)
    test(loc(), U8.eq(dyn.get(0), U8.from_i64(42)), "Value at index 0")
    test(loc(), U8.eq(dyn.get(1), U8.from_i64(255)), "Value at index 1")

    dyn.set(0, U8.from_i64(99))
    test(loc(), U8.eq(dyn.get(0), U8.from_i64(99)), "Set and get index 0")

    dyn.delete()
    assert_eq(loc(), 0, dyn.ptr) // Pointer cleared after delete
    assert_eq(loc(), 0, dyn.len) // Length reset after delete
    assert_eq(loc(), 0, dyn.cap) // Capacity reset after delete

    catch(err: Str) {
        println(loc(), "test_array_dynamic_u8: error thrown:")
        println(err)
    }
    catch(err: IndexOutOfBoundsError) {
        println(loc(), "test_array_static_u8: IndexOutOfBoundsError thrown:")
        println(err.msg)
    }
    catch(err: U8_OverflowError) {
        println(loc(), "test_array_static_u8: U8_OverflowError thrown:")
        println(err.msg)
    }
    catch(err: FullError) {
        println(loc(), "test_array_static_u8: FullError thrown:")
        println(err.msg)
    }
}
test_array_dynamic_u8()

test_array_static_str := proc() {
    mut stat := StrArray.new(3)
    assert_eq(loc(), 3, stat.len)
    assert_eq(loc(), stat.cap, stat.len)
    test(loc(), not(stat.is_dyn), "Static array should not be dynamic")

    stat.set(0, "hello")
    stat.set(1, "world")
    stat.set(2, "!")
    test(loc(), Str.eq("!", stat.get(2)), "Get after set at index 2")

    stat.delete()
    catch(err: IndexOutOfBoundsError) {
        println(loc(), "test_array_static_str: IndexOutOfBoundsError thrown:")
        println(err.msg)
    }
}
test_array_static_str()

test_array_dynamic_str := proc() {
    mut dyn := StrArray.new_dyn()
    assert_eq(loc(), 0, dyn.len)
    assert_eq(loc(), StrArray.INIT_DYN_CAP, dyn.cap)

    dyn.push("foo")
    dyn.push("bar")
    assert_eq(loc(), 2, dyn.len)
    test(loc(), Str.eq(dyn.get(0), "foo"), "Value at index 0")
    test(loc(), Str.eq(dyn.get(1), "bar"), "Value at index 1")

    dyn.set(0, "baz")
    test(loc(), Str.eq(dyn.get(0), "baz"), "Set and get index 0")

    mut combined_str := ""
    // for s in dyn { // TODO support for loops for Arrays
    // for i in 0..dyn.len { // TODO support for loops with ranges
    mut i := 0
    // while i.lt(dyn.len) { // TODO Fix more UFCS cases
    while lt(i, dyn.len) {
        s := dyn.get(i)
        combined_str = format(combined_str, s)
        i.inc()
    }
    assert_eq_str(loc(), "bazbar", combined_str)

    dyn.delete()
    assert_eq(loc(), 0, dyn.ptr) // Pointer cleared after delete
    assert_eq(loc(), 0, dyn.len) // Length reset after delete
    assert_eq(loc(), 0, dyn.cap) // Capacity reset after delete

    catch(err: Str) {
        println(loc(), "test_array_dynamic_str: error thrown:")
        println(err)
    }
    catch(err: IndexOutOfBoundsError) {
        println(loc(), "test_array_dynamic_str: IndexOutOfBoundsError thrown:")
        println(err.msg)
    }
    catch(err: I64_OverflowError) {
        println(loc(), "test_array_dynamic_str: error thrown:")
        println(err.msg)
    }
}
test_array_dynamic_str()

test_array_static_bool := proc() {
    mut stat := BoolArray.new(3)
    assert_eq(loc(), 3, stat.len)
    assert_eq(loc(), stat.cap, stat.len)
    test(loc(), not(stat.is_dyn), "Static array should not be dynamic")

    stat.set(0, true)
    stat.set(1, false)
    stat.set(2, true)
    test(loc(), Bool.eq(true, stat.get(2)), "Get after set at index 2")

    stat.delete()
    catch(err: Str) {
        println(loc(), "test_array_static_bool: error thrown:")
        println(err)
    }
}
test_array_static_bool()

test_array_dynamic_bool := proc() {
    mut dyn := BoolArray.new_dyn()
    assert_eq(loc(), 0, dyn.len)
    assert_eq(loc(), BoolArray.INIT_DYN_CAP, dyn.cap)

    dyn.push(true)
    dyn.push(false)
    assert_eq(loc(), 2, dyn.len)
    test(loc(), Bool.eq(dyn.get(0), true), "Value at index 0")
    test(loc(), Bool.eq(dyn.get(1), false), "Value at index 1")

    dyn.set(0, false)
    test(loc(), Bool.eq(dyn.get(0), false), "Set and get index 0")

    dyn.delete()
    assert_eq(loc(), 0, dyn.ptr)
    assert_eq(loc(), 0, dyn.len)
    assert_eq(loc(), 0, dyn.cap)

    catch(err: Str) {
        println(loc(), "test_array_dynamic_bool: error thrown:")
        println(err)
    }
}
test_array_dynamic_bool()

test_array_static_i64 := proc() {
    mut stat := I64Array.new(3)
    assert_eq(loc(), 3, stat.len)
    assert_eq(loc(), stat.cap, stat.len)
    test(loc(), not(stat.is_dyn), "Static array should not be dynamic")

    stat.set(0, 100)
    stat.set(1, 200)
    stat.set(2, 300)
    test(loc(), I64.eq(300, stat.get(2)), "Get after set at index 2")

    stat.delete()
    catch(err: IndexOutOfBoundsError) {
        println(loc(), "test_array_static_i64: IndexOutOfBoundsError thrown:")
        println(err.msg)
    }
}
test_array_static_i64()

test_array_dynamic_i64 := proc() {
    mut dyn := I64Array.new_dyn()
    assert_eq(loc(), 0, dyn.len)
    assert_eq(loc(), I64Array.INIT_DYN_CAP, dyn.cap)

    dyn.push(42)
    dyn.push(84)
    assert_eq(loc(), 2, dyn.len)
    test(loc(), I64.eq(dyn.get(0), 42), "Value at index 0")
    test(loc(), I64.eq(dyn.get(1), 84), "Value at index 1")

    dyn.set(0, 123)
    test(loc(), I64.eq(dyn.get(0), 123), "Set and get index 0")

    dyn.delete()
    assert_eq(loc(), 0, dyn.ptr)
    assert_eq(loc(), 0, dyn.len)
    assert_eq(loc(), 0, dyn.cap)

    catch(err: Str) {
        println(loc(), "test_array_dynamic_i64: error thrown:")
        println(err)
    }
    catch(err: IndexOutOfBoundsError) {
        println(loc(), "test_array_dynamic_i64: IndexOutOfBoundsError thrown:")
        println(err.msg)
    }
    catch(err: FullError) {
        println(loc(), "test_array_dynamic_i64: FullError thrown:")
        println(err.msg)
    }
}
test_array_dynamic_i64()

Vec2 := struct {
    mut x : I64 = 0
    mut y : I64 = 0

    new := func(x: I64, y: I64) returns Vec2 {
        mut v := Vec2()
        v.x = x
        v.y = y
        return v
    }
}

test_array_static_vec2 := proc() {
    mut stat := Array.new("Vec2", size_of(Vec2), 3) // TODO More ergonomic constructor
    assert_eq(loc(), 3, stat.len)
    assert_eq(loc(), stat.cap, stat.len)
    test(loc(), not(stat.is_dyn), "Static array should not be dynamic")

    // v1 = Vec2.new(1, 2) // TODO FIX
    // v2 = Vec2.new(3, 4) // TODO FIX
    // v3 = Vec2.new(5, 6) // TODO FIX
    v1 := Vec2.new(1, 2)
    v2 := Vec2.new(3, 4)
    v3 := Vec2.new(5, 6)
    stat.set(0, v1)
    stat.set(0, v2)
    stat.set(0, v3)

    mut v := Vec2()
    stat.get(2, v)
    // assert_eq(loc(), 5, v.x) // TODO FIX
    // assert_eq(loc(), 6, v.y) // TODO FIX

    // stat.push(Vec2.new(7, 8)) // Should panic if uncommented

    stat.delete()
    catch(err: Str) {
        println(loc(), "test_array_static_vec2: error thrown:")
        println(err)
    }
}
test_array_static_vec2()

test_array_dynamic_vec2 := proc() {
    mut dyn := Array.new_dyn("Vec2", size_of(Vec2)) // TODO More ergonomic constructor
    assert_eq(loc(), 0, dyn.len)
    // assert_eq(loc(), Array.INIT_DYN_CAP, dyn.cap) // Optional: verify cap

    // dyn.push(Vec2.new(10, 20)) // TODO FIX
    // dyn.push(Vec2.new(30, 40)) // TODO FIX
    v1 := Vec2.new(10, 20)
    dyn.push(v1)
    v2 := Vec2.new(30, 40)
    dyn.push(v2)

    // assert_eq(loc(), 2, dyn.len) // Optional
    // mut v0 := dyn.get(0)
    // test(loc(), I64.eq(v0.x, 10), "v0.x should be 10")
    // test(loc(), I64.eq(v0.y, 20), "v0.y should be 20")

    // dyn.set(0, Vec2.new(50, 60))
    // mut v1 := dyn.get(0)
    // test(loc(), I64.eq(v1.x, 50), "v1.x should be 50")
    // test(loc(), I64.eq(v1.y, 60), "v1.y should be 60")

    dyn.delete()
    assert_eq(loc(), 0, dyn.ptr)
    assert_eq(loc(), 0, dyn.len)
    assert_eq(loc(), 0, dyn.cap)

    catch(err: Str) {
        println(loc(), "test_array_dynamic_vec2: error thrown:")
        println(err)
    }
    catch(err: FullError) {
        println(loc(), "test_array_static_u8: FullError thrown:")
        println(err.msg)
    }
}
test_array_dynamic_vec2()
