// WIP: Self hosted implementation of LANG_NAME

mode cli

LANG_NAME: String = "cil"

// rscil TODO allow reading files
example_src := "exit(0)\n"

// ---------- lexer

TokenType := enum {
    // basic
    Eof

    // Single-character tokens.
    Minus Plus Slash Star
    LeftParen RightParen LeftBrace RightBrace LeftBracket RightBracket
    Comma Colon Semicolon

    // One or two character tokens.
    Dot DoubleDot
    Not NotEqual
    Equal EqualEqual
    Greater GreaterEqual
    Lesser LesserEqual

    // Literals.
    Identifier String Number

    // Reserved words:
    Mut

    // bool
    True False
    // type definition
    Struct Enum
    // function definition
    Returns Throws
    // flow control
    If Else
    While For In
    Match Switch Default
    Return Throw
    Try Catch

    // Special in this language:
    Func Proc Macro
    Mode

    // Errors
    Const Var
    Fn
    Case
    Invalid
    UnterminatedString
    // UnterminatedComment // TODO do nesting comments like jai and odin, shoulnd't be that hard. ideally in the lexer itself
}

Token := struct {
    token_type: TokenType = TokenType.Invalid
    start: i64 = 0
    end: i64 = 0
    line: i64 = 0
    col: i64 = 0
}

// TODO rscil ignore commas and semicolons as optional separations inside structs and enums
// TODO rscil ignore semicolons as optional statement separations inside bodies

// TODO rscil implement arrays
// TODO rscil allow access to individual chars inside a string
// scan_tokens := func(source: String) returns Array(Token) {}

main := proc() {
    println("TODO implement lexer")
}
