mode test

AAAError := struct {}
simplest_catch := proc () {
    catched := false
    throw AAAError()
    assert(loc(), false) // This line should be unreachable
    catch (err: AAAError) {
        catched := true
    }
    assert(loc(), catched)
}
simplest_catch()

DivideByZero := struct {}

// Functions must explicitly declare what they can throw, like in Java
safe_div := func(a: I64, b: I64) returns I64 throws DivideByZero {
    if I64.eq(b, 0) {
        throw DivideByZero()
    }
    return div(a, b)
}

unsafe_div := proc(a: I64, b: I64) returns I64 {
    return safe_div(a, b)
    catch (err: DivideByZero) {
        println("unsafe_div: Correctly catched thrown DivideByZero")
        return 0 // REM Just return 0, why not? not expected to happen
    }
}
unsafe_div(42, 0) // This call is valid, the exception is caught locally

unsafe_div2 := proc(a: I64, b: I64) returns I64 {
    result := safe_div(a, b)
    assertm(loc(), false, "DivideByZero should have been thrown")
    catch (err: DivideByZero) {
        println("unsafe_div2: Correctly catched thrown DivideByZero")
        return 0 // REM Just return 0, why not? not expected to happen
    }
    return result
}
unsafe_div2(42, 0)

// Only the selecter error can be thrown
// REM Remove 'throws DivideByZero' to trigger a static type error
missing_throws := proc() throws DivideByZero {
    safe_div(42, 0)
}
// missing_throws() // REM Gives an error if uncommented

// All exceptions that are not catched must be declared in the throws section again
// TODO: We should have a way to signal which calls can throw? perhaps not if the compiler errors are good enough?
// perhaps try at the beginning of each statement that can throw or ? at the end
example_catch := proc() {
    a := 420
    mut b := 10
    println(a.to_str(), " / ", b.to_str(), " = ", I64.to_str(safe_div(a, b))) // test fcalls as args
    b = 0
    result := I64.to_str(a.safe_div(b)) // test declaration
    mut result2 := "0"
    result2 = I64.to_str(a.safe_div(b)) // test assignment
    println(a.to_str(), " / ", b.to_str(), " = ", result)
    catch (err: DivideByZero) {
        println(a.to_str(), " / ", b.to_str(), " = ...")
        println("example_catch: Correctly catched thrown DivideByZero")
    }

    // safe_div(a, b) // REM this one is not catched nor example_catch throws anything, should give error
}
example_catch()

ErrorUndeclaredInFunc := struct {}
ErrorUndeclaredInMethod := struct {}
ErrorUndeclaredInAssoc := struct {}

another_func := func() throws ErrorUndeclaredInFunc {
    throw ErrorUndeclaredInFunc()
}

SomeStruct := struct {
    some_method := func(self: SomeStruct) throws ErrorUndeclaredInMethod {
        throw ErrorUndeclaredInFunc() // TODO FIX the compiler should tell us this is not ErrorUndeclaredInMethod
    }

    some_assoc := func() throws ErrorUndeclaredInAssoc {
        throw ErrorUndeclaredInAssoc()
    }
}

// Remove things from the throws section to test the errors
undeclared_throws := proc() throws Str, I64, ErrorUndeclaredInAssoc, ErrorUndeclaredInMethod {
    if true {
        another_func()
        catch (err: ErrorUndeclaredInFunc) {
            println("undeclared_throws: Correctly catched thrown ErrorUndeclaredInFunc")
        }
    } else {
        throw "We can throw Str, but we have to declare it in throws"
    }
    while false {
        throw 69
    }
    SomeStruct.some_assoc()
    ss := SomeStruct()
    ss.some_method()

    // another_func() // REM if uncommented, should ask undeclared_throws to throws ErrorUndeclaredInFunc
}
test_undeclared_throws := proc() {
    undeclared_throws()
    catch (err: ErrorUndeclaredInAssoc) {
        println("test_undeclared_throws: Correctly catched thrown ErrorUndeclaredInAssoc")
    }
    catch (err: Str) {
    }
    catch (err: I64) {
    }
    catch (err: ErrorUndeclaredInMethod) {
    }
}
test_undeclared_throws()

// TODO do beter examples with throw, including catch in the examples
# example1 := func(u32 a, u32 b) returns u32 throws AaaException, BbbException {

#     if (a > b) throw AaaException;
#     else if (a > b) throw BbbException
#     else if (a < 32) return a;
#     return 42;
# }

# main := proc() throws BbbException {

#     const result1 = example1(50, 50) catch {
#         AaaException: debug.print("AaaException\n");
#         BbbException: rethrow;
#     }

#     const result2 = example2(50, 50) catch debug.print("Exception calling example2\n");
# }
