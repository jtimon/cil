mode script

// Basic control flow (execution):

// basic 'if' statements:

if not(gt(4, 2)) {
    panic("'gt(4, 2)' (aka '4 > 2') is not true") // Obviously this should never happen
}

// basic 'if/else' statements:

// if 42 { // fails because ints are not allowed for conditions, only bool
if gt(2, 4) {
    println("'if' within  if/else not acepting  2 is lesser than 4")
} else {
    print("else: 'else' is allowed and functional")
}

// while loops:

mut it := 0 // one has to use the 'mut' keyword for actual variables, since all declarations are const by default
print("it: ")
// while 42 { // fails, because while expects a bool first, not an int
while lt(it, 5) {
    print(itoa(it), " ")
    it = add(it, 1)
}

// switch statements:

test_int_switch := proc (to_switch: i64) {
    switch to_switch {
    case add(40, 2):
       println("in test_int_switch(): ", itoa(to_switch), " is the answer.")
    case:
       println("in test_int_switch(): ", itoa(to_switch), " is a wrong answer.")
    }
}
test_int_switch(00)
test_int_switch(42); // note the semicolon between statements is being ignored
test_int_switch(69)

// TODO Move 'print' tests elsewhere:

print("\n") // TODO make this and the next line be equivalent, don't escape \n
println("")
