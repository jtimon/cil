mode script

// Basic control flow (execution):

// regular comment
/* block comment */
/** doc comment */
# another comment
/*

multi
line
comments

/*
nested too
*/

doesn't break with nesting like C // TODO nested comments don't work properly in cil-mode

*/ // TODO should it be unterminated comment when we remove this? or give errors in "doesn't break"

// basic 'if' statements:

if not(gt(4, 2)) {
    panic(loc(), "'gt(4, 2)' (aka '4 > 2') is not true") // Obviously this should never happen
}

// basic 'if/else' statements:

// if 42 { // fails because ints are not allowed for conditions, only bool
if gt(2, 4) {
    println("'if' within if/else not acepting 2 is lesser than 4")
} else if gt(3, 4) {
    println("'if' within elif not acepting 3 is lesser than 4")
} else {
    println("else: 'else' is allowed and functional")
}

// while loops:

mut it := 0 // one has to use the 'mut' keyword for actual variables, since all declarations are const by default
print("it: ")
// while 42 { // fails, because while expects a bool first, not an int
while lt(it, 5) {
    print(it.to_str(), " ")
    it = add(it, 1)
}
print("\n")

// switch statements:

test_int_switch := proc (to_switch: I64) {
    switch to_switch {
    case add(40, 2):
        println("in test_int_switch(): ", to_switch.to_str(), " is the answer."); // semicolons are optional here too
    case:
        println("in test_int_switch(): ", to_switch.to_str(), " is a wrong answer.");
    }
}
test_int_switch(00);
test_int_switch(42); // note the semicolon between statements is being ignored
test_int_switch(69); // note the semicolon between statements is being ignored at the end of the file too
// test_int_switch(69);; // fails because there's no need for ';;' (aka empty statements), try 'if true {}' instead, whatever you want that for.
