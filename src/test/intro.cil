mode script

import("src/core.cil")

//// Intro to the language (suggestion: uncommentt lines which claim will fail and see what happens)
// @ // fails because @ is invalid on the lexer for now
// adsgffdgfdg sdfgfsdgsf @ dfghj dgfhj // fails because @ is invalid on the lexer, but at a different line and col

// Declarations and assignments:

AAA : bool = and(false, false, false, true, false); // Explicit types are allowed in declarations, but optional
BBB := or(false, and(true, true), false) // It is a strongly typed language, but allows type inference (not in arguments yet, never in return types)
// AAA := true // fails, re-declaration of user constant 'AAA'
// AAA = false // fails, assignment to a constant, all declarations are constant by default
mut CCC := true // variables need the mut keyword, both as variables and as arguments
CCC = false; // assignments to mut declarations (aka variables/mut arguments) are allowed
// and := true // fails, re-declaration of core func 'and'
// Note that ';' between statements is allowed, but optional
// CCC = false;; // fails because ';;' is not allowed, I can't think of an example where that would make sense

// Functions types:

// Procedures or procs can be declared and directly called in most modes including script
abc_proc := proc(a: bool, b: bool, c: bool) {

    abc := proc(a: bool, b: bool, c: bool) {
	println("inside abc, three bools: ", btoa(a), ", ", btoa(b), ", ", btoa(c))
    }
    abc(a, b, c)
}
abc_proc(true, true, true)
// TODO explicitly implement closures or equivalent before fixing this bug
abc_proc(false, false, false)

// Pure functions or funcs are similar to procs, but they can't have side effects, thus they cannot call to procedures
my_func := func(a: bool, b: bool) returns bool {
//     println("proc") // fails, funcs cannot call procs, println is a core proc
//     abc_proc() // fails, funcs cannot call procs, abc_proc is a custom proc
//     return 42 // fails, because 42 is not a bool
    return and(a, b)
}
test(my_func(true, true), "my_func(true, true) didn't return true")

// return can be used in functions that don't return anything to exit early
exit_early_print := proc(a: bool, msg: String) {
    println(msg)
    if a {
        return
    }
    println("exit_early_print didn't exit early")
}
exit_early_print(false, "Calling: exit_early_print(false, msg)")
exit_early_print(true, "Calling: exit_early_print(true, msg)")

// Functions can return multiple values
my_func_multi := func(a: bool, b: bool) returns bool, bool {
    return a, b
}
// _a, _b := my_func_multi(true, true) // TODO multiple declarations
// _a, _b = my_func_multi(true, true) // TODO multiple assignments

// TODO treat macros differently, currently they're equivalent to procs
my_macro := macro(a: bool, b: bool) returns bool {
    return and(a, b)
}
test(my_macro(true, true), "my_macro(true, true) didn't return true")

my_str_func := func(a: String) returns String {
    return a
}
arg_test_str := "strings can be passed as arguments and returned"
assert_eq_str(my_str_func(arg_test_str), arg_test_str)

main := proc() {
    mut my_bool := true
    my_bool = my_func(my_bool, my_func(true, my_func(true, true)))
    res := my_func(true, true)
    my_bool = and(res, my_func(true, my_func(true, true)))
    my_bool = my_func(res, my_func(true, my_func(true, true)))

    // abc(false, true, false) // fails, because abc is defined locally in proc 'abc_proc'
}
// 'mode script' doesn't need to declare a main proc, but it can, and also call it
main()

// TODO fix col for invalid args
// and(true, false, true, 15, "aaa", true, false) // fails because and only takes bool args

// Struct definitions can be used as namespaces by declaring only constants in them (no mut)
MyNamespace := struct {

    field_static_str : String = "field 'field_static_str' in struct 'MyNamespace' is being accessed"

    proc_static := proc() {
        return "func 'proc_static' in struct 'MyNamespace' is being called"
    }

    func_static_str := func() returns String {
        return "func 'func_static_str' in struct 'MyNamespace' has being called"
    }
}
println(MyNamespace.field_static_str)
// MyNamespace.proc_static() // TODO method calls as statements
// temp_str := MyNamespace.func_static_str() // TODO method calls as primary expr in declaration
// println(temp_str)
// println(MyNamespace.func_static_str()) // TODO method calls as primary expr as argument
