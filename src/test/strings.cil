mode test

test_strings := proc() {
    test(loc(), Str.eq(format("Hello, ", "world!"), "Hello, world!"), "format('Hello, ', 'world!') = 'Hello, world!'")
    assert_eq_str(loc(), "abc", format("a", "b", "c"))
    test(loc(), I64.eq(I64.from_str("123"), 123), "I64.from_str('123') = 123")
    test(loc(), I64.eq(I64.from_str("0"), 0), "I64.from_str('0') = 0")
    // TODO: Test with invalid strings for I64.from_str, e.g., I64.from_str("abc") // Expected: error or undefined behavior
    test(loc(), Str.eq(I64.to_str(456), "456"), "I64.to_str(456) = '456'")
    test(loc(), Str.eq(I64.to_str(0), "0"), "I64.to_str(0) = '0'")

    print("this is the same as the next line\n");
    println("this is the same as the next line");

    empty_str := ""
    len3_str := "012"
    len5_str := "01234"
    test(loc(), I64.eq(empty_str.len(), 0), "Str.len('') = 0")
    test(loc(), I64.eq(len3_str.len(), 3), "Str.len('012') = 3")
    test(loc(), I64.eq(len5_str.len(), 5), "Str.len('01234') = 5")

    assert_eq_str(loc(), "0",   get_substr("01234", 0, 1))
    assert_eq_str(loc(), "012", get_substr("01234", 0, 3))
    assert_eq_str(loc(), "234", get_substr("01234", 2, 5))

    assert_eq_str(loc(), "\\",  get_substr(",,\\", 2, 3))
    assert_eq_str(loc(), "\"",  get_substr(",,\"", 2, 3))
    assert_eq_str(loc(), "\n",  get_substr(",,\n", 2, 3))
    assert_eq_str(loc(), "\t",  get_substr(",,\t", 2, 3))
    assert_eq_str(loc(), "\r",  get_substr(",,\r", 2, 3))
    // assert_eq_str(loc(), "\0",  get_substr(",,\0", 2, 3)) // TODO Decide: Do we need to handle string null termination in string literals?

    assert_eq_str(loc(), "\\",  get_char(",,\\", 2))
    assert_eq_str(loc(), "\"",  get_char(",,\"", 2))
    assert_eq_str(loc(), "\n",  get_char(",,\n", 2))
    assert_eq_str(loc(), "\t",  get_char(",,\t", 2))
    assert_eq_str(loc(), "\r",  get_char(",,\r", 2))
    // assert_eq_str(loc(), "\0",  get_char(",,\0", 2))

    catch(err: Str) {
        println(loc(), "test_strings: error thrown:")
        println(err)
    }
    catch(err: I64_OverflowError) {
        println(loc(), "test_strings: error thrown:")
        println(err.msg)
    }
    catch(err: IndexOutOfBoundsError) {
        println(loc(), "test_strings: IndexOutOfBoundsError thrown:")
        println(err.msg)
    }
}
test_strings()
