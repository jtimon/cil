mode test

MyEnum := enum {
    Red,
    Green,
    Blue,
}

MyStruct := struct {
    static_bool_field: Bool = true
    mut bool_field: Bool = false
    mut int_field: I64 = 0 // 0 is just the default, but you can set something else once in the init func
    mut string_field: String = "" // TODO fix type inference in fields
    mut color_field: MyEnum = MyEnum.Red

    new := func(bool_field: Bool, int_field: I64, string_field: String, color_field: MyEnum) returns MyStruct {
        self := MyStruct()
        self.bool_field = bool_field
        self.int_field = int_field
        self.string_field = string_field
        self.color_field = color_field
        return self
    }

    to_string := proc(self: MyStruct) returns String {
        todo("implement MyStruct.to_string()")
        return ""
    }
}

test_my_struct := proc() {
    test(loc(), MyStruct.static_bool_field, "MyStruct.static_bool_field is not true")

    my_struct := MyStruct.new(true, 42, "my field string", MyEnum.Green) // with enum field
    // assert(loc(), my_struct.bool_field) // TODO Fix returning structs in funcs and/or implement struct literals
    // assert_eq(loc(), 42, my_struct.int_field) // TODO Fix
    // assert_eq_str(loc(), "my field string", my_struct.string_field) // TODO Fix
    // assert_eq(loc(), MyEnum.Green, my_struct.color_field) // TODO Fix
}
test_my_struct()

EmptyStruct := struct {} // NOTE: empty struct instantiations are allowed
Vec2 := struct {
    mut x : I64 = 0
    mut y : I64 = 0

    add_all_coordinates := func(self: Vec2) returns I64 {
        return add(self.x, self.y)
    }
}

Vec3 := struct {
    mut x : I64 = 0
    mut y : I64 = 0
    mut z : I64 = 0
}

// my_struct_type := MyStruct
// trying_dot_struct2 : Bool = MyStruct.bool_field.ccccc // TODO implement nested structs

test_structs := proc() {
    my_empty_struct := EmptyStruct() // NOTE: empty instantiations are allowed
    mut my_vec2 := Vec2()
    my_vec2.x = 40
    my_vec2.y =  2
    assert_eq(loc(), 42, Vec2.add_all_coordinates(my_vec2)) // associated functions using fields
    assert_eq(loc(), 42, my_vec2.add_all_coordinates()) // associated functions can be used as methods (if the first argument matches the type)
    mut my_vec3 := Vec3()
    my_vec3.z = 42
    assert_eq(loc(), 42, my_vec3.z) // access to struct fields as arguments

    // my_bool := Bool() // TODO allow instantiations of core types
    // my_i64 := I64() // TODO truly self host I64 with an [8]U8
    // my_string := String() // TODO don't migrate from string to String, just self host it after structs and pointers

}
test_structs()
