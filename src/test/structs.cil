mode test

MyStruct := struct {
    static_bool_field : bool = true
    mut bool_field : bool = false
    mut int_field : i64 = 42 // 42 is just the default, but you can set something else once in the init func
    mut string_field := ""

    // TODO allow assingments to struct fields, both mut or only overwrite the default once in init,
    // but then it is no longer "static", that's only for the compiler to care, not the user's problem
    // TODO static vs only_one assignment are details the interpreter should be smart enough to through errors about
    init := func(self: MyStruct, int_const : i64, bool_field : bool, int_field : i64, string_field) {
        // self.bool_field_static = 69 // TODO think of a keyword to force this to fail
        // self.int_const = 69
        // self.bool_field = true
        // self.int_field = 1
        // self.string_field = "true"
    }

    to_string := proc(self: MyStruct) returns String {
	todo("implement MyStruct.to_string()")
	return ""
    }
}

EmptyStruct := struct {} // NOTE: empty struct instantiations are allowed
Vec2 := struct {
    mut x : i64 = 0
    mut y : i64 = 0

    add_all_coordinates := func(self: Vec2) returns i64 {
        return add(self.x, self.y)
    }
}

Vec3 := struct {
    mut x : i64 = 0
    mut y : i64 = 0
    mut z : i64 = 0
}

// my_struct_type := MyStruct
// trying_dot_struct2 : bool = MyStruct.bool_field.ccccc // TODO implement nested structs

test_structs := proc() {
    test(MyStruct.static_bool_field, "MyStruct.static_bool_field is not true")
    my_empty_struct := EmptyStruct() // NOTE: empty instantiations are allowed
    mut my_vec2 := Vec2()
    my_vec2.x = 40
    my_vec2.y =  2
    assert_eq(42, Vec2.add_all_coordinates(my_vec2)) // associated functions using fields
    assert_eq(42, my_vec2.add_all_coordinates()) // associated functions can be used as methods (if the first argument matches the type)
    mut my_vec3 := Vec3()
    my_vec3.z = 42
    assert_eq(42, my_vec3.z) // access to struct fields as arguments
    my_I64 := I64() // TODO migrate from i64 to I64
    // my_Bool := Bool() // TODO migrate from bool to Bool
    // my_String := String() // TODO don't migrate from string to String, just self host it after structs and pointers

}
test_structs()
