mode test

MyEnum := enum {
    Red,
    Green,
    Blue,
}

MyStruct := struct {
    // TODO fix type inference in fields
    static_bool_field: Bool = true
    mut bool_field: Bool = false
    mut int_field: I64 = 0 // 0 is just the default, but you can set something else once in the init func
    mut string_field: Str = ""
    mut color_field: MyEnum = MyEnum.Red
    mut vec2_field: Vec2 = Vec2()

    new := func(bool_field: Bool, int_field: I64, string_field: Str, color_field: MyEnum, vec2_field: Vec2) returns MyStruct {
        mut self := MyStruct()
        self.bool_field = bool_field
        self.int_field = int_field
        self.string_field = string_field
        self.color_field = color_field
        self.vec2_field = vec2_field
        println("Inside MyStruct.new(): self.string_field = '", self.string_field, "'")
        return self
    }

    to_string := proc(self: MyStruct) returns Str {
        todo("implement MyStruct.to_string()")
        return ""
    }

    unchecked_associated := func() returns I64 {
        return my_undefined_symbol // FIXME this should be caught at type checking phase, undefined symbol
    }

    unchecked_method := func(ms: MyStruct) returns I64 {
        return my_undefined_symbol // FIXME this should be caught at type checking phase, undefined symbol
    }
}

test_my_struct := proc() {
    test(loc(), MyStruct.static_bool_field, "MyStruct.static_bool_field is not true")

    mut v := Vec2()
    v.x = 1
    v.y = 2

    mut my_struct := MyStruct.new(true, 42, "my field string", MyEnum.Green, v) // with enum and struct field
    assert(loc(), my_struct.bool_field)
    assert_eq(loc(), 42, my_struct.int_field)
    assert_eq_str(loc(), "my field string", my_struct.string_field)
    res_vec2_field := my_struct.vec2_field
    assert_eq(loc(), 1, res_vec2_field.x)
    assert_eq(loc(), 2, res_vec2_field.y)
    assert_eq(loc(), 1, my_struct.vec2_field.x) // multiple dots for accessing fields
    assert_eq(loc(), 2, my_struct.vec2_field.y)

    // Test enum field reassignment
    my_struct.color_field = MyEnum.Blue

    // Assert enum field is Blue using a switch
    mut is_blue := false
    switch my_struct.color_field {
    case MyEnum.Blue: is_blue = true
    case: is_blue = false
    }
    assert(loc(), is_blue)

    // Switch statement to check runtime matching after assignment
    mut color_str := ""
    switch my_struct.color_field {
    case MyEnum.Red: color_str = "red"
    case MyEnum.Green: color_str = "green"
    case MyEnum.Blue: color_str = "blue"
    case: color_str = "unknown"
    }
    assert_eq_str(loc(), "blue", color_str)

    // MyStruct.unchecked_associated() // FIXME uncomment to test if associated functions are being checked
    // my_struct.unchecked_method() // FIXME uncomment to test if methods are being checked
}
test_my_struct()

EmptyStruct := struct {} // NOTE: empty struct instantiations are allowed
Vec2 := struct {
    mut x : I64 = 0
    mut y : I64 = 0

    new := func(x: I64, y: I64) returns Vec2 {
        mut v := Vec2()
        v.x = x
        v.y = y
        println("Inside Vec2.new(): v.x = ", I64.to_str(v.x))
        return v
    }

    add_all_coordinates := func(self: Vec2) returns I64 {
        return add(self.x, self.y)
    }
}

Vec3 := struct {
    mut x : I64 = 0
    mut y : I64 = 0
    mut z : I64 = 0
}

// my_struct_type := MyStruct
// trying_dot_struct2 : Bool = MyStruct.bool_field.ccccc // TODO implement nested structs

test_structs := proc() {
    my_empty_struct := EmptyStruct() // NOTE: empty instantiations are allowed
    mut my_vec2 := Vec2()
    my_vec2.x = 40
    my_vec2.y =  2
    assert_eq(loc(), 42, Vec2.add_all_coordinates(my_vec2)) // associated functions using fields
    assert_eq(loc(), 42, my_vec2.add_all_coordinates()) // associated functions can be used as methods (if the first argument matches the type)

    mut my_vec3 := Vec3()
    my_vec3.z = 42
    assert_eq(loc(), 42, my_vec3.z) // access to struct fields as arguments

    new_vec2 := Vec2.new(40, 2)
    println("Outside Vec2.new(): new_vec2.x = ", I64.to_str(new_vec2.x))

    assert_eq(loc(), 40, my_vec2.x)
    assert_eq(loc(), 40, new_vec2.x)
    assert_eq(loc(),  2, new_vec2.y)
    assert_eq(loc(), 42, Vec2.add_all_coordinates(new_vec2))
    assert_eq(loc(), Vec2.add_all_coordinates(my_vec2), Vec2.add_all_coordinates(new_vec2))

    another_vec2 := my_vec2 // make a copy
    assert_eq(loc(), Vec2.add_all_coordinates(my_vec2), Vec2.add_all_coordinates(another_vec2))

    my_i8 := U8()
    my_bool := Bool() /// TODO truly self host Bool with an U8
    my_i64 := I64() // TODO truly self host I64 with an [8]U8
    my_string := Str()

}
test_structs()
