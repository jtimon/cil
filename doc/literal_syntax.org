* Array vs Struct Literals Across Languages

| Language | Array Literal Example             | Struct Definition & Literal Example          |
|----------+-----------------------------------+----------------------------------------------|
| TIL      | start_fib: [3]I64 = [1, 1, 2]      | Vec2 := struct { x: I64; y: I64 } \n v: Vec2 = Vec2{ x: 1, y: 2 } |
| Porth    | (not applicable, stack-based)     | (Porth doesn't have structs)                |
| Python   | start_fib = [1, 1, 2]              | v = {'x': 1, 'y': 2}                          |
| Rust     | let start_fib = [1, 1, 2];         | let v = Vec2 { x: 1, y: 2 };                 |
| D        | auto start_fib = [1, 1, 2];        | auto v = Vec2(x: 1, y: 2);                   |
| Haskell  | start_fib = [1, 1, 2]              | v = Vec2 { x = 1, y = 2 }                    |
| Lisp     | (setf start-fib '(1 1 2))          | (defstruct vec2 x y) \n (make-vec2 :x 1 :y 2) |
| Elisp    | (setq start-fib [1 1 2])           | (defstruct vec2 x y) \n (make-vec2 :x 1 :y 2) |
| Lua      | start_fib = {1, 1, 2}              | v = {x = 1, y = 2}                            |
| Odin     | start_fib := [3]i64{1, 1, 2}       | v := Vec2{ x = 1, y = 2 }                    |
| Jai      | start_fib: [3]s64 = {1, 1, 2}      | v: Vec2 = .{ .x = 1, .y = 2 }                |
| Mojo     | start_fib = [1, 1, 2]              | v = Vec2(x=1, y=2)                           |

* Notes:
- TIL intends to use square brackets for array literals (`[1, 1, 2]`) and braces for struct literals (`Vec2{ x: 1, y: 2 }`).
- Odin and Jai use braces for both arrays and structs but distinguish structs using field names (with dot `.` in Jai).
- Python, Lua use dictionaries/tables for structs (which are dynamic maps).
- Lisp and Elisp define structs explicitly but use keyword args in `make-struct`.
- D's syntax is close to named parameters even for struct literals.
- Rust enforces explicit field names in struct literals, while arrays always use brackets.

* Observations:
- TIL's plan resembles Rust but drops the confusing dot notation of Jai.
- Lua and Python blur the line between structs and dynamic maps.
- Lisp variants (Common Lisp, Elisp) use keyword initialization, similar to D and Haskell.
